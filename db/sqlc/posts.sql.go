// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title,
  link,
  img,
  state,
  content,
  created_at
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, title, link, state, img, content, created_at
`

type CreatePostParams struct {
	Title     sql.NullString `json:"title"`
	Link      sql.NullString `json:"link"`
	Img       string         `json:"img"`
	State     sql.NullBool   `json:"state"`
	Content   string         `json:"content"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.Title,
		arg.Link,
		arg.Img,
		arg.State,
		arg.Content,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.State,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, link, state, img, content, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.State,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, link, state, img, content, created_at FROM posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsStmt, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Link,
			&i.State,
			&i.Img,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
  title = COALESCE($1, title),
  link = COALESCE($2, link),
  img = COALESCE($3, img),
  state = COALESCE($4, state),
  content = COALESCE($5, content)
WHERE
  link = $2
RETURNING id, title, link, state, img, content, created_at
`

type UpdatePostParams struct {
	Title   sql.NullString `json:"title"`
	Link    sql.NullString `json:"link"`
	Img     sql.NullString `json:"img"`
	State   sql.NullBool   `json:"state"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.Title,
		arg.Link,
		arg.Img,
		arg.State,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.State,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
