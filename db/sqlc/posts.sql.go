// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  title,
  link,
  img,
  content
) VALUES (
  $1, $2, $3, $4
) RETURNING id, title, link, img, content, created_at
`

type CreatePostParams struct {
	Title   sql.NullString `json:"title"`
	Link    sql.NullString `json:"link"`
	Img     string         `json:"img"`
	Content string         `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.Title,
		arg.Link,
		arg.Img,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, title, link, img, content, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
  title = COALESCE($1, title),
  link = COALESCE($2, link),
  img = COALESCE($3, img),
  content = COALESCE($4, content)
WHERE
  id = $5
RETURNING id, title, link, img, content, created_at
`

type UpdatePostParams struct {
	Title   sql.NullString `json:"title"`
	Link    sql.NullString `json:"link"`
	Img     sql.NullString `json:"img"`
	Content sql.NullString `json:"content"`
	ID      int32          `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.Title,
		arg.Link,
		arg.Img,
		arg.Content,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Img,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
